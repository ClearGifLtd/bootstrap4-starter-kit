#!/usr/bin/env node
/* exported colors */

/**
 * Module dependencies.
 */

var app    = require('../app');
var semver = require('semver');                  // https://npmjs.org/package/semver

// Node Modules
var http   = require('http');

// Configuration and debugging
var pkg    = require('../../package.json');
var debug  = require('debug')(pkg.name + ':www');  // always use app name and name of .js file
var colors = require('colors');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create HTTPs server.
 */

// Not currently used since we terminate SSL at
// the load balancer level. However this coupled
// with HSTS will get an A+ SSL Labs score!

// var httpsServer = https.createServer({
//   key: privateKey,
//   cert: certificate,
//   ca: certificateAuthority,
//   ciphers: [
//     'ECDHE-RSA-AES128-GCM-SHA256',
//     'ECDHE-ECDSA-AES128-GCM-SHA256',
//     'ECDHE-RSA-AES256-GCM-SHA384',
//     'ECDHE-ECDSA-AES256-GCM-SHA384',
//     'DHE-RSA-AES128-GCM-SHA256',
//     'ECDHE-RSA-AES128-SHA256',
//     'DHE-RSA-AES128-SHA256',
//     'ECDHE-RSA-AES256-SHA384',
//     'DHE-RSA-AES256-SHA384',
//     'ECDHE-RSA-AES256-SHA256',
//     'DHE-RSA-AES256-SHA256',
//     'HIGH',
//     '!aNULL',
//     '!eNULL',
//     '!EXPORT',
//     '!DES',
//     '!RC4',
//     '!MD5',
//     '!PSK',
//     '!SRP',
//     '!CAMELLIA'
//   ].join(':'),
// }, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  'use strict';
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  'use strict';
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = (typeof port === 'string') ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug(bind.red.bold + ' requires elevated privileges'.red.bold);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      debug(bind.red.bold + ' is already in use'.red.bold);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  'use strict';
  var addr = server.address();
  var bind = (typeof addr === 'string') ? 'pipe ' + addr : 'port ' + addr.port;
  var engine = pkg.engines.node || pkg.engines.iojs;

  // Test for correct node version as spec'ed in package.info
  if (!semver.satisfies(process.versions.node, engine)) {
    debug('Error: unsupported version of Node or io.js!'.red.bold);
    debug(pkg.name.red.bold + ' needs Node or io.js version '.red.bold + engine.red.bold);
    process.exit(0);
  }

  // Exit cleanly on Ctrl+C
  process.on('SIGINT', function () {
    console.log('\n');
    debug('has ' + 'shutdown'.green.bold);
    debug('was running for ' + Math.round(process.uptime()).toString().green.bold + ' seconds.');
    process.exit(0);
  });

  // Log how we are running
  debug('Listening on: ' + bind.green.bold);
  debug('listening in ' + app.settings.env.green.bold + ' mode.');
  debug('Ctrl+C'.green.bold + ' to shut down. ;)');

}
